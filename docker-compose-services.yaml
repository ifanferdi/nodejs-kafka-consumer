services:
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:${ES_LOCAL_VERSION}
    container_name: ${ES_LOCAL_CONTAINER_NAME}
    restart: 'always'
    volumes:
      - elasticsearch:/usr/share/elasticsearch
    ports:
      - ${ES_LOCAL_PORT}:9200
    environment:
      discovery.type: single-node
      xpack.security.enabled: false
      xpack.security.http.ssl.enabled: false
      http.port: 9200
      http.cors.enabled: true
      http.cors.allow-origin: http://localhost:1358,http://127.0.0.1:1358
      http.cors.allow-headers: X-Requested-With,X-Auth-Token,Content-Type,Content-Length,Authorization
      http.cors.allow-credentials: true
      bootstrap.memory_lock: true
      ES_JAVA_OPTS: -Xms512m -Xmx512m
    ulimits:
      memlock:
        soft: -1
        hard: -1
    healthcheck:
      test: [ "CMD-SHELL", "curl --output /dev/null --silent --head --fail -u elastic:${ES_LOCAL_PASSWORD} http://localhost:${ES_LOCAL_PORT}" ]
      interval: 5s
      timeout: 5s
      retries: 10

    # kibana_settings:
    #   depends_on:
    #     elasticsearch:
    #       condition: service_healthy
    #   image: docker.elastic.co/elasticsearch/elasticsearch:${ES_LOCAL_VERSION}
    #   container_name: kibana_settings
    #   restart: 'no'
    #   command: >
    #     bash -c '
    #       echo "Setup the kibana_system password";
    #       start_time=$(date +%s);
    #       timeout=60;
    #       until curl -s -u "elastic:${ES_LOCAL_PASSWORD}" -X POST http://elasticsearch:${ES_LOCAL_PORT}/_security/user/kibana_system/_password -d "{\"password\":\"'${KIBANA_LOCAL_PASSWORD}'\"}" -H "Content-Type: application/json" | grep -q "^{}"; do if [ $(($(date +%s) - $$start_time)) -ge $$timeout ]; then echo "Error: Elasticsearch timeout"; exit 1; fi; sleep 2; done;
    #     '

    # kibana:
    # depends_on:
    #   kibana_settings:
    #     condition: service_completed_successfully
    # image: docker.elastic.co/kibana/kibana:${ES_LOCAL_VERSION}
    # container_name: ${KIBANA_LOCAL_CONTAINER_NAME}
    # restart: 'always'
    # volumes:
    #   - kibana:/usr/share/kibana/data
    # ports:
    #   - 127.0.0.1:${KIBANA_LOCAL_PORT}:5601
    # environment:
    #   - SERVER_NAME=kibana
    #   - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    #   - ELASTICSEARCH_USERNAME=kibana_system
    #   - ELASTICSEARCH_PASSWORD=${KIBANA_LOCAL_PASSWORD}
    #   - XPACK_ENCRYPTEDSAVEDOBJECTS_ENCRYPTIONKEY=${KIBANA_ENCRYPTION_KEY}
    #   - ELASTICSEARCH_PUBLICBASEURL=http://localhost:${ES_LOCAL_PORT}
    # healthcheck:
    #   test: [ "CMD-SHELL", "curl -s -I http://kibana:5601 | grep -q 'HTTP/1.1 302 Found'" ]
    #   interval: 10s
    #   timeout: 10s
    #   retries: 20

  dejavu:
    image: appbaseio/dejavu:3.6.0
    container_name: dejavu
    ports:
      - 1358:1358
    links:
      - elasticsearch

  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.1
    hostname: zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    volumes:
      - zookeeper-data:/var/lib/zookeeper/data
      - zookeeper-logs:/var/lib/zookeeper/log
    healthcheck:
      test: echo srvr | nc zookeeper 2181 || exit 1
      start_period: 10s
      retries: 20
      interval: 10s

  kafka:
    image: confluentinc/cp-kafka:7.3.1
    hostname: kafka
    container_name: kafka
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "29092:29092"
      - "9092:9092"
      - "9101:9101"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://192.168.100.219:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_JMX_PORT: 9101
      KAFKA_JMX_HOSTNAME: localhost
    healthcheck:
      test: nc -z localhost 9092 || exit -1
      start_period: 15s
      interval: 5s
      timeout: 10s
      retries: 10
    volumes:
      - kafka:/etc/kafka

  kafdrop:
    image: obsidiandynamics/kafdrop
    container_name: kafdrop
    restart: "always"
    environment:
      KAFKA_BROKERCONNECT: "kafka:29092"
      JVM_OPTS: "-Xms16M -Xmx64M -Xss360K -XX:-TieredCompilation -XX:+UseStringDeduplication -noverify"
    ports:
      - 9010:9000
    depends_on:
      - kafka

  debezium:
    image: debezium/connect:latest
    restart: always
    container_name: debezium
    hostname: debezium
    depends_on:
      kafka:
        condition: service_healthy
    ports:
      - "8083:8083"
    environment:
      BOOTSTRAP_SERVERS: kafka:29092
      GROUP_ID: 1
      CONFIG_STORAGE_TOPIC: connect_configs
      STATUS_STORAGE_TOPIC: connect_statuses
      OFFSET_STORAGE_TOPIC: connect_offsets
      KEY_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      VALUE_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      ENABLE_DEBEZIUM_SCRIPTING: "true"
    healthcheck:
      test: [ "CMD", "curl", "--silent", "--fail", "-X", "GET", "http://localhost:8083/connectors" ]
      start_period: 10s
      interval: 10s
      timeout: 5s
      retries: 5

  debezium-ui:
    image: debezium/debezium-ui:latest
    restart: always
    container_name: debezium-ui
    hostname: debezium-ui
    depends_on:
      debezium:
        condition: service_healthy
    ports:
      - "8080:8080"
    environment:
      KAFKA_CONNECT_URIS: http://debezium:8083

volumes:
  elasticsearch:
  kibana:
  kafka:
  zookeeper-data:
  zookeeper-logs:
